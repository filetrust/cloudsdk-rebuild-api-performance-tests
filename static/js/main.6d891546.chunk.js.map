{"version":3,"sources":["components/SplashScreen/SplashScreen.module.scss","views/FileRebuildPerformanceTest/ResultsGraphView/ResultsGraph/ResultsGraph.module.scss","components/Main/Main.module.scss","components/GlasswallLogo/GlasswallLogo.tsx","components/GlasswallNav/NavBar/NavBar.tsx","components/GlasswallNav/Nav/Nav.tsx","components/GlasswallNav/NavButton/NavButton.tsx","components/GlasswallNav/ExpandButton/ExpandButton.tsx","components/GlasswallNav/NavSpacer/NavSpacer.tsx","components/GlasswallNav/NavLabel/NavLabel.tsx","components/Main/Main.tsx","components/SplashScreen/SplashScreen.tsx","views/SplashScreenView/SplashScreenView.tsx","views/ArchitectureView/ArchitectureView.tsx","components/Events/ClickHandler.tsx","components/Modal/Modal.tsx","components/ApiKeyModal/Header.tsx","components/ApiKeyModal/Body.tsx","components/ApiKeyModal/CloseButton.tsx","components/ApiKeyModal/ApiKeyModal.tsx","components/GlasswallTable/GlasswallTable.tsx","components/formatDuration/formatDuration.ts","views/FileRebuildPerformanceTest/ResultsTableView/ResultsTable/ResultsTable.tsx","components/useMountEffect.ts","views/FileRebuildPerformanceTest/ResultsTableView/ResultsTableView.tsx","components/RunningTests/RunningTests.tsx","views/FileRebuildPerformanceTest/RunTestsView/RunTestsView.tsx","views/FileRebuildPerformanceTest/ResultsGraphView/ResultsGraph/ResultsGraph.tsx","views/FileRebuildPerformanceTest/ResultsGraphView/ResultsGraphView.tsx","App.jsx","serviceWorker.js","index.jsx","components/ApiKeyModal/ApiKeyModal.module.scss","views/FileRebuildPerformanceTest/RunTestsView/RunTestsView.module.scss","components/GlasswallNav/Nav/Nav.module.scss","views/FileRebuildPerformanceTest/ResultsTableView/ResultsTable/ResultsTable.module.scss","components/RunningTests/RunningTests.module.scss","components/GlasswallNav/NavBar/NavBar.module.scss","components/GlasswallNav/NavButton/NavButton.module.scss","components/GlasswallNav/ExpandButton/ExpandButton.module.scss","views/SplashScreenView/SplashScreenView.module.scss","components/Modal/Modal.module.scss","views/FileRebuildPerformanceTest/ResultsTableView/ResultsTableView.module.scss","views/FileRebuildPerformanceTest/ResultsGraphView/ResultsGraphView.module.scss","App.module.scss","components/GlasswallLogo/GlasswallLogo.module.scss","components/GlasswallNav/NavSpacer/NavSpacer.module.scss","components/GlasswallNav/NavLabel/NavLabel.module.scss","views/ArchitectureView/ArchitectureView.module.scss","components/GlasswallTable/GlasswallTable.module.scss"],"names":["module","exports","GlasswallLogo","props","className","styles","defaultLogo","style","background","data-testid","NavBar","navBar","expanded","logo","children","Nav","nav","menuExpanded","bottom","scrollContainer","NavButton","button","selected","onClick","clickHandler","ExpandButton","NavSpacer","spacer","NavLabel","label","Main","showTitle","undefined","title","console","error","pageHeading","main","content","SplashScreen","splashContainer","logoContainer","headingContainer","heading","subHeading","childContainer","SplashScreenView","onSubmit","e","submitApiKey","input","type","required","placeholder","onChange","changeHandler","target","value","ArchitectureView","useEffect","onLoad","architecturePageContainer","src","alt","ClickHandler","ref","useRef","useCallback","event","current","contains","onClickOutside","onClickInside","document","body","addEventListener","removeEventListener","defaultProps","ModalContents","overlay","container","Modal","modalRoot","querySelector","ReactDOM","createPortal","CSSTransition","in","isOpen","classNames","timeout","transitionTimeout","unmountOnExit","onExited","onExitCallback","Fragment","Header","header","Body","useState","apiKey","setApiKey","preventDefault","submitFunction","CloseButton","closeAction","tabIndex","close","ApiKeyModal","onCloseAction","GlasswallTable","table","formatDuration","duration","match","ms","parseFloat","split","hms","parseInt","toFixed","ResultsTable","results","map","row","resultRow","key","timestamp","datetimeString","Date","toLocaleString","replace","result","responseCode","requestId","filenameCell","name","fileSize","metricFilesize","Math","floor","metricDetect","metricRebuild","metricUpload","metricDownload","responseTime","version","failedTestRow","colSpan","useMountEffect","fun","ResultsView","loading","setLoading","setResults","apiKeyIsInvalid","setApiKeyIsInvalid","modalIsOpen","setModalIsOpen","getResults","a","fetch","method","headers","response","json","responseString","ok","JSON","parse","message","status","submitNewApiKey","newApiKey","updateApiKey","resultsPageContainer","buttonLink","RunningTests","tests","setTests","getTests","url","refreshRow","refreshContainer","refresh","length","textAlign","test","group","RunTestsView","runNewTest","runTestsPageContainer","newTestContainer","newTest","runningTests","ResultsGraph","showDetect","setshowDetect","showRebuild","setshowRebuild","showUpload","setshowUpload","showDownload","setshowDownload","showResponseTime","setshowResponseTime","filteredResults","filter","r","labels","fs","detectData","rebuildData","uploadData","downloadData","responseTimeData","data","datasets","fill","borderColor","backgroundColor","pointBackgroundColor","pointHoverBackgroundColor","yAxisID","hidden","hoverBackgroundColor","options","responsive","tooltips","mode","elements","line","scales","xAxes","display","gridLines","yAxes","position","id","scaleLabel","labelString","ticks","max","min","toggleDataContainer","column","defaultChecked","ResultsGraphView","App","apiKeyConfirmed","setApiKeyConfirmed","mainTitle","setMainTitle","navExpanded","setNavExpanded","selectedNavButton","setSelectedNavButton","selectedButton","app","mainContainer","to","exact","path","ResultsTableView","Boolean","window","location","hostname","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6d891546.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"splashContainer\":\"SplashScreen_splashContainer__2Y4yr\",\"logoContainer\":\"SplashScreen_logoContainer__29gQW\",\"logo\":\"SplashScreen_logo__3OwCB\",\"headingContainer\":\"SplashScreen_headingContainer__v-bcb\",\"heading\":\"SplashScreen_heading__2NS4o\",\"subHeading\":\"SplashScreen_subHeading__1DFgo\",\"childContainer\":\"SplashScreen_childContainer__32GZC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleDataContainer\":\"ResultsGraph_toggleDataContainer__2j-fD\",\"row\":\"ResultsGraph_row__24Ekl\",\"column\":\"ResultsGraph_column__2Z21m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageHeading\":\"Main_pageHeading__xxdMP\",\"expanded\":\"Main_expanded__16UNz\",\"main\":\"Main_main__3JhNz\",\"showTitle\":\"Main_showTitle__25ULg\",\"content\":\"Main_content__2K0G4\"};","import React from \"react\";\n\nimport styles from \"./GlasswallLogo.module.scss\";\n\nexport interface GlasswallLogoProps { className?: string }\n\nconst GlasswallLogo = (props: GlasswallLogoProps) => {\n    return (\n        <div className={props.className ? props.className : styles.defaultLogo}\n            style={{ background: `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 254.33 147' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23fff'%3E%3Cpath d='M163.81 93.12l-15.86 49.22h2.92l15.87-49.22zM179.01 55.02l15.71-48.74h-2.92l-15.71 48.74zM4.13 74.11v-.08C4.13 66.32 10.14 60 18.36 60c4.89 0 7.83 1.32 10.66 3.72l-3.76 4.54c-2.09-1.74-3.96-2.75-7.1-2.75-4.34 0-7.79 3.84-7.79 8.45v.08c0 4.96 3.41 8.61 8.22 8.61 2.17 0 4.11-.54 5.62-1.63v-3.88H18.2v-5.16h11.79v11.79c-2.79 2.37-6.63 4.3-11.59 4.3-8.45 0-14.27-5.93-14.27-13.96zM34.52 60.46h5.97v21.71h13.53v5.43h-19.5zM69.06 60.27h5.5L86.19 87.6h-6.24l-2.48-6.09H65.99l-2.48 6.09h-6.09zm6.28 15.97l-3.6-8.8-3.61 8.8zM88.14 83.65l3.53-4.23c2.44 2.02 5 3.3 8.1 3.3 2.44 0 3.92-.97 3.92-2.56v-.08c0-1.51-.93-2.29-5.47-3.45-5.47-1.4-9-2.91-9-8.3v-.08c0-4.92 3.95-8.18 9.5-8.18 3.95 0 7.33 1.24 10.08 3.45l-3.1 4.5c-2.4-1.67-4.77-2.68-7.06-2.68s-3.49 1.05-3.49 2.36v.08c0 1.79 1.16 2.37 5.85 3.57 5.51 1.43 8.61 3.41 8.61 8.14v.08c0 5.39-4.11 8.41-9.97 8.41-4.09.01-8.24-1.42-11.5-4.33zM112.29 83.65l3.53-4.23c2.44 2.02 5 3.3 8.1 3.3 2.44 0 3.92-.97 3.92-2.56v-.08c0-1.51-.93-2.29-5.47-3.45-5.47-1.4-9-2.91-9-8.3v-.08c0-4.92 3.95-8.18 9.5-8.18 3.95 0 7.33 1.24 10.08 3.45l-3.1 4.5c-2.4-1.67-4.77-2.68-7.06-2.68s-3.49 1.05-3.49 2.36v.08c0 1.79 1.16 2.37 5.85 3.57 5.51 1.43 8.61 3.41 8.61 8.14v.08c0 5.39-4.11 8.41-9.97 8.41-4.09.01-8.24-1.42-11.5-4.33zM156.56 60.38h2.52l7.44 22.68 7.76-22.6h3.22l-9.69 27.34h-2.6l-7.44-22.03-7.48 22.03h-2.56l-9.69-27.34h3.33l7.76 22.6zM202.29 87.6H199l-3.18-7.17h-14.77l-3.22 7.17h-3.14l12.37-27.33h2.87zm-13.84-23.76l-6.21 13.84h12.37zM207.09 60.46h3.06v24.31h15.28v2.83h-18.34zM230.24 60.46h3.06v24.31h15.28v2.83h-18.34z'/%3E%3C/g%3E%3C/svg%3E\") no-repeat center center` }}\n            data-testid=\"logoDiv\"></div>\n    );\n};\n\nexport default GlasswallLogo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GlasswallLogo from \"../../GlasswallLogo/GlasswallLogo\";\n\nimport styles from \"./NavBar.module.scss\";\n\nexport interface NavBarProps { logo: boolean, expanded: boolean, children: React.ReactNode }\n\nconst NavBar = (props: NavBarProps) => {\n\n    return (\n        <div className={`${styles.navBar} ${props.expanded ? styles.expanded : \"\"}`}>\n            {props.logo &&\n                <GlasswallLogo className={styles.logo} />\n            }\n\n            {props.children}\n\n        </div>\n    );\n};\n\nNavBar.propTypes = {\n    logo: PropTypes.bool\n};\n\nexport { NavBar };","import React from \"react\";\n\nimport styles from \"./Nav.module.scss\";\n\nexport interface NavProps { expanded: boolean, bottom: boolean, children?: React.ReactNode }\n\nexport type Nav = NavProps;\n\nconst Nav = (props: NavProps) => {\n    return (\n        <nav className={`${styles.nav} ${props.expanded ? styles.menuExpanded : \"\"} ${props.bottom ? styles.bottom : \"\"}`}>\n            <div className={styles.scrollContainer}>\n                <ul>\n                    {props.children}\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport { Nav };","import React from \"react\";\nimport styles from \"./NavButton.module.scss\";\n\nexport interface NavButtonProps { selected: boolean, clickHandler?: Function, children?: React.ReactNode }\n\nfunction NavButton(props: NavButtonProps) {\n    return (\n        <li>\n            <button\n                className={`${styles.button} ${props.selected ? styles.selected : \"\"}`}\n                onClick={() => props.clickHandler && props.clickHandler()}>{props.children}</button>\n        </li>\n    );\n}\n\nexport { NavButton };","import React from \"react\";\n\nimport styles from \"./ExpandButton.module.scss\";\n\nexport interface ExpandButtonProps { expanded: boolean, clickHandler: Function }\n\nfunction ExpandButton(props: ExpandButtonProps) {\n    return (\n        <button className={`${styles.button}  ${props.expanded ? styles.expanded : \"\"}`} onClick={() => props.clickHandler()}></button>\n    );\n}\n\nexport { ExpandButton };","import React from \"react\";\n\nimport styles from \"./NavSpacer.module.scss\";\n\nconst NavSpacer = () => {\n    return (\n        <li>\n            <div className={styles.spacer}></div>\n        </li>\n    );\n};\n\nexport { NavSpacer };","import React from \"react\";\n\nimport styles from \"./NavLabel.module.scss\";\n\nexport interface NavLabelProps {label: string};\n\nconst NavLabel = (props: NavLabelProps) => {\n\n    return (\n        <li><button className={styles.label}>{props.label}</button></li>\n    );\n};\n\nexport { NavLabel };","import React from \"react\";\n\nimport styles from \"./Main.module.scss\";\n\nexport interface MainProps {\n    expanded: boolean,\n    showTitle: boolean,\n    title?: string,\n    children: React.ReactNode\n}\n\nconst Main = (props: MainProps) => {\n\n    if (props.showTitle && (props.title === undefined || props.title === null)) {\n        console.error(\"showTitle is set to true, but no title was supplied to <Main>.\");\n    }\n\n    return (\n        <>\n            {props.showTitle &&\n                <h1 className={`${styles.pageHeading} ${props.expanded ? styles.expanded : \"\"}`}>\n                    {props.title}\n                </h1>\n            }\n\n            <div className={`${styles.main} ${props.expanded ? styles.expanded : \"\"} ${props.showTitle ? styles.showTitle : \"\"}`}>\n\n                <div className={styles.content}>\n                    {props.children}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Main;","import React from \"react\";\n\nimport GlasswallLogo from \"../GlasswallLogo/GlasswallLogo\";\n\nimport styles from \"./SplashScreen.module.scss\";\n\nexport interface SplashScreenProps { heading: string; subHeading?: string; children?: React.ReactNode; }\n\nconst SplashScreen = (props: SplashScreenProps) => {\n    return (\n        <div className={styles.splashContainer} data-testid=\"splashContainerDiv\">\n            <div className={styles.logoContainer} data-testid=\"logoContainerDiv\">\n                <GlasswallLogo className={styles.logo} />\n            </div>\n\n            <div className={styles.headingContainer} data-testid=\"headingContainerDiv\">\n                <h1 className={styles.heading}>{props.heading}</h1>\n                {props.subHeading &&\n                    <h2 className={styles.subHeading}>{props.subHeading}</h2>\n                }\n                <div className={styles.childContainer} data-testid=\"childContainerDiv\">\n                    {props.children}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SplashScreen;\n","import React from \"react\";\n\nimport SplashScreen from \"../../components/SplashScreen/SplashScreen\";\n\nimport styles from \"./SplashScreenView.module.scss\";\n\nexport interface SplashScreenViewProps { changeHandler: Function, submitApiKey: Function }\n\nconst SplashScreenView = (props: SplashScreenViewProps) => {\n\n    return (\n        <SplashScreen heading=\"Rebuild API\" subHeading=\"Automated Performance Tests\">\n            <form onSubmit={e => props.submitApiKey(e)}>\n                <div>\n                    <input className={styles.input}\n                        type=\"password\"\n                        required\n                        placeholder=\"Enter API Key\"\n                        onChange={e => props.changeHandler(e.target.value)}></input>\n                </div>\n\n                <div>\n                    <button className={styles.button}  type=\"submit\">Submit</button>\n                </div>\n            </form>\n\n        </SplashScreen>\n    );\n};\n\nexport default SplashScreenView;","import React, { useEffect } from \"react\";\n\nimport styles from \"./ArchitectureView.module.scss\";\n\nexport interface ArchitectureViewProps { onLoad: Function }\n\nconst ArchitectureView = (props: ArchitectureViewProps) => {\n\n    useEffect(() => {\n        props.onLoad(\"Architecture\", \"Architecture\");\n    });\n\n    return (\n        <div className={styles.architecturePageContainer}>\n            <h3>Executing a Test</h3>\n            <hr />\n            <img src=\"https://raw.githubusercontent.com/ahewitt-glasswall/mvp-rebuild-performance-tests/master/documents/architecture/architecture.png\"\n                alt=\"Overall architecture for running a test.\" />\n\n            <h3>Inside the Docker Container</h3>\n            <hr />\n            <img src=\"https://raw.githubusercontent.com/ahewitt-glasswall/mvp-rebuild-performance-tests/master/documents/architecture/dockerSequence.png\"\n                alt=\"Sequence diagram for the docker container tests run in.\" />\n        </div>\n    );\n};\n\nexport default ArchitectureView;","import React, { useRef, useEffect, useCallback } from \"react\";\n\nexport interface ClickHandlerProps { onClickInside: Function, onClickOutside: Function, children: React.ReactNode}\n\nconst ClickHandler = (props: ClickHandlerProps) => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const onClick = useCallback((event) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n            props.onClickOutside(event);\n        }\n        else {\n            props.onClickInside(event);\n        }\n    }, [props]);\n\n    useEffect(() => {\n        document.body.addEventListener(\"mousedown\", onClick, false);\n\n        return () => {\n            document.body.removeEventListener(\"mousedown\", onClick, false);\n        };\n    }, [onClick]);\n\n    return <div ref={ref}>{props.children}</div>;\n}\n\nClickHandler.defaultProps = {\n    onClickInside: () => { },\n    onClickOutside: () => { }\n};\n\nexport default ClickHandler;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ClickHandler from \"../Events/ClickHandler\";\nimport { ExitHandler } from \"react-transition-group/Transition\";\n\nimport styles from \"./Modal.module.scss\";\n\nexport interface ModalContentsProps {\n    onClickInside: Function, onClickOutside: Function, children: React.ReactNode\n}\n\nconst ModalContents = (props: ModalContentsProps) => {\n    return (\n        <div className={styles.overlay}>\n            <ClickHandler onClickInside={props.onClickInside} onClickOutside={props.onClickOutside}>\n                <section className={styles.container}>{props.children}</section>\n            </ClickHandler>\n        </div>);\n}\n\n\nexport interface ModalProps {\n    onClickInside: Function,\n    onClickOutside: Function,\n    isOpen: boolean,\n    transitionTimeout: number,\n    onExitCallback: ExitHandler<HTMLElement>,\n    children: React.ReactNode\n}\n\nconst Modal = (props: ModalProps) => {\n    const modalRoot = document.querySelector(\"#modalRoot\");\n\n    return ReactDOM.createPortal(\n        <CSSTransition\n            in={props.isOpen}\n            classNames=\"modal\"\n            timeout={props.transitionTimeout}\n            unmountOnExit\n            onExited={props.onExitCallback}>\n\n            <React.Fragment>\n                {<ModalContents\n                    {...props}\n                    onClickInside={props.onClickInside}\n                    onClickOutside={props.onClickOutside} />}\n            </React.Fragment>\n\n        </CSSTransition>,\n        modalRoot);\n}\n\nModal.defaultProps = {\n    onClickInside: () => { },\n    onClickOutside: () => { },\n    onExitCallback: () => { },\n    transitionTimeout: 300\n};\n\nexport default Modal;","import React from \"react\";\nimport styles from \"./ApiKeyModal.module.scss\";\n\nfunction Header() {\n    return <header className={styles.header}>\n               <h1>API Key</h1>\n           </header>;\n}\n\nexport default Header;","import React, { useState } from \"react\";\n\nimport styles from \"./ApiKeyModal.module.scss\";\n\nexport interface BodyProps { submitFunction: Function };\n\nfunction Body(props: BodyProps) {\n  const [apiKey, setApiKey] = useState(\"\");\n\n  return (\n    <div className={styles.body}>\n      <h2>Enter a new API Key</h2>\n\n      <form onSubmit={e => {\n        e.preventDefault(); props.submitFunction(apiKey)\n      }}>\n        <input type=\"text\"\n          placeholder=\"API Key\"\n          onChange={e => setApiKey(e.target.value)}></input>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div >\n  );\n}\n\nexport default Body;","import React from \"react\";\nimport styles from \"./ApiKeyModal.module.scss\";\n\nexport interface CloseButtonProps { closeAction: Function };\n\nfunction CloseButton(props: CloseButtonProps) {\n    return <button onClick={() => props.closeAction()} tabIndex={-1} type=\"button\" className={styles.close}></button>;\n}\n\nexport default CloseButton;","import React from \"react\";\nimport Modal from \"../Modal/Modal\";\n\nimport Header from \"./Header\";\nimport Body from \"./Body\";\nimport CloseButton from \"./CloseButton\";\n\nexport interface ApiKeyModalProps {\n    isOpen: boolean,\n    onClickInside?: Function,\n    onCloseAction: Function,\n    submitFunction: Function\n};\n\nconst ApiKeyModal = (props: ApiKeyModalProps) => {\n    return (\n        <Modal\n            isOpen={props.isOpen}\n            onClickInside={() => { }}\n            onClickOutside={props.onCloseAction}>\n\n            <Header />\n            <Body submitFunction={props.submitFunction}/>\n\n            <CloseButton closeAction={props.onCloseAction} />\n        </Modal>\n    );\n};\n\nexport default ApiKeyModal;","import React from \"react\";\n\nimport styles from \"./GlasswallTable.module.scss\";\n\nexport interface GlasswallTableProps { children: React.ReactNode };\n\nconst GlasswallTable = (props: GlasswallTableProps) => {\n    return (\n        <table className={styles.table}>\n            {props.children}\n        </table>\n    );\n};\n\nexport default GlasswallTable;","// duration format: \"hh:mm:ss.ms\"\nconst formatDuration = (duration: string) => {\n    // eslint-disable-next-line\n    let pattern = \"^([0-9][0-9]:[0-9][0-9]:[0-9][0-9]\\.[0-9][0-9]*)\";\n    if (!duration.match(pattern)) {\n        console.error(`Duration: '${duration}' did not match pattern (hh:mm:ss.ms)`);\n        return;\n    }\n    let ms = parseFloat(`0.${duration.split(\".\")[1]}`);\n    let hms = duration.split(\":\");\n\n    return ((parseInt(hms[0], 10) * 3600) +\n        (parseInt(hms[1], 10) * 60) +\n        (parseInt(hms[2].split(\".\")[0], 10)) + ms).toFixed(7);\n};\n\nexport default formatDuration;\n","import React from \"react\";\nimport GlasswallTable from \"../../../../components/GlasswallTable/GlasswallTable\";\nimport formatDuration from \"../../../../components/formatDuration/formatDuration\";\n\nimport styles from \"./ResultsTable.module.scss\";\n\nexport interface ResultsTableProps { results: Array<any> };\n\nconst formatTimestamp = (datetimeString: string) =>\n    new Date(datetimeString).toLocaleString().replace(\",\", \" -\");\n\nconst formatFileSize = (fileSize: number) => `${Math.floor(fileSize / 1000000)} MB`;\n\nconst ResultsTable = (props: ResultsTableProps) => {\n    return (\n        <div>\n            {props.results.map(row => {\n                return (\n                    <div className={styles.resultRow} key={row.timestamp}>\n                        <div className={styles.timestamp}>\n                            {formatTimestamp(row.timestamp)}\n                        </div>\n\n                        <GlasswallTable>\n                            <thead>\n                                <tr>\n                                    <th>Filename</th>\n                                    <th>File Size</th>\n                                    <th>Detect Filetype (Seconds)</th>\n                                    <th>Rebuild (Seconds)</th>\n                                    <th>Upload (Seconds)</th>\n                                    <th>Download (Seconds)</th>\n                                    <th>Response Time (ms)</th>\n                                    <th>Engine Version</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {row.results.map((result: any) => {\n                                    return (\n                                        <>\n                                            {parseInt(result.responseCode) === 200 &&\n                                                <tr key={result.requestId}>\n                                                    <td className={styles.filenameCell}>{result.name.replace(\"Post_FileForProcessing_\", \"\")}</td>\n                                                    <td>{formatFileSize(result.metricFilesize)}</td>\n                                                    <td>{formatDuration(result.metricDetect)}</td>\n                                                    <td>{formatDuration(result.metricRebuild)}</td>\n                                                    <td>{formatDuration(result.metricUpload)}</td>\n                                                    <td>{formatDuration(result.metricDownload)}</td>\n                                                    <td>{result.responseTime}</td>\n                                                    <td>{result.version}</td>\n                                                </tr>\n                                            }\n\n                                            {parseInt(result.responseCode) !== 200 &&\n                                                <tr key={result.requestId} className={styles.failedTestRow}>\n                                                    <td>{result.name.replace(\"Post_FileForProcessing_\", \"\")}</td>\n                                                    <td colSpan={7}>Error: {result.responseCode}</td>\n                                                </tr>\n                                            }\n                                        </>\n                                    );\n                                })\n                                }\n                            </tbody>\n                        </GlasswallTable>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default ResultsTable;","import { useEffect } from \"react\";\nconst useMountEffect = (fun: React.EffectCallback) => useEffect(fun, []);\nexport default useMountEffect;","import React, { useState, useCallback } from \"react\";\nimport ApiKeyModal from \"../../../components/ApiKeyModal/ApiKeyModal\";\nimport ResultsTable from \"./ResultsTable/ResultsTable\";\nimport useMountEffect from \"../../../components/useMountEffect\";\n\nimport styles from \"./ResultsTableView.module.scss\";\n\nexport interface ResultsViewProps {\n    apiKey: string,\n    onLoad: Function,\n    updateApiKey: Function\n}\n\nconst ResultsView = (props: ResultsViewProps) => {\n    const getResultsUrl = \"https://cqxec6akld.execute-api.eu-west-1.amazonaws.com/prod/filerebuildperformancetest/getresults\";\n\n    const [loading, setLoading] = useState(true);\n    const [results, setResults] = useState([]);\n    const [apiKeyIsInvalid, setApiKeyIsInvalid] = useState(false);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n\n    const getResults = useCallback(async (apiKey?) => {\n        try {\n            const response = await fetch(getResultsUrl, {\n                method: \"GET\",\n                headers: {\n                    \"x-api-key\": apiKey ?? props.apiKey\n                }\n            });\n\n            let responseString = await response.json();\n\n            if (response.ok) {\n                setResults(JSON.parse(responseString));\n                setApiKeyIsInvalid(false);\n            }\n            else {\n                if (responseString.message === \"Forbidden\") {\n                    console.error(`Error ${response.status}. Invalid API Key`)\n                }\n                else {\n                    console.error(`Error ${response.status}. ${responseString}`);\n                }\n\n                setApiKeyIsInvalid(true);\n            }\n        }\n        catch (e) {\n            console.error(e);\n            setApiKeyIsInvalid(true);\n        }\n        finally {\n            setLoading(false);\n        }\n    }, [setResults, props.apiKey, setApiKeyIsInvalid, setLoading]);\n\n    useMountEffect(() => {\n        props.onLoad(\"FileRebuildPerformanceTest | Results Table\", \"/filerebuilderformancetest/results/table\");\n        getResults();\n    });\n\n    const submitNewApiKey = async (newApiKey: string) => {\n        setModalIsOpen(false);\n        props.updateApiKey(newApiKey);\n        await setLoading(true);\n        getResults(newApiKey);\n    };\n\n    return (\n        <div className={styles.resultsPageContainer}>\n            <ApiKeyModal\n                isOpen={modalIsOpen}\n                onCloseAction={() => setModalIsOpen(false)}\n                submitFunction={submitNewApiKey} />\n\n            {loading &&\n                <div>Loading ... </div>\n            }\n\n            {!loading &&\n                <>\n                    {apiKeyIsInvalid &&\n                        <div>\n                            Your API Key is invalid.\n                            Click <button\n                                className={styles.buttonLink}\n                                type=\"button\"\n                                onClick={() => setModalIsOpen(true)}>here</button> to enter a new one.\n                        </div>\n                    }\n\n                    {!apiKeyIsInvalid &&\n                        <ResultsTable results={results} />\n                    }\n                </>\n            }\n        </div>\n    );\n};\n\nexport default ResultsView;","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport styles from \"./RunningTests.module.scss\";\n\nexport interface RunningTestsProps { apiKey: string, url: string };\n\nconst useMountEffect = (fun: any) => useEffect(fun, []);\n\nconst RunningTests = (props: RunningTestsProps) => {\n    const [tests, setTests] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const getTests = useCallback(async (apiKey?: string) => {\n        try {\n            const response = await fetch(props.url, {\n                method: \"GET\",\n                headers: {\n                    \"x-api-key\": apiKey ?? props.apiKey\n                }\n            });\n\n            let responseString = await response.json();\n\n            if (response.ok) {\n                setTests(JSON.parse(responseString));\n            }\n            else {\n                if (responseString.message === \"Forbidden\") {\n                    console.error(`Error ${response.status}. Invalid API Key`)\n                }\n                else {\n                    console.error(`Error ${response.status}. ${responseString}`);\n                }\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            setLoading(false);\n        }\n    }, [setTests, props, setLoading]);\n\n    useMountEffect(() => {\n        getTests();\n    });\n\n    return (\n        <>\n            {loading &&\n                <div>Loading ... </div>\n            }\n\n            {!loading &&\n                <>\n                    <h2 className={styles.refreshRow}>\n                        <span className={styles.refreshContainer}>\n                            <svg\n                                className={styles.refresh}\n                                onClick={() => { setLoading(true); getTests(); }}>\n                            </svg>\n                        </span>\n                    </h2>\n                    <table className={styles.table}>\n                        <thead>\n                            <tr>\n                                <th>Timestamp</th>\n                                <th>Status</th>\n                                <th>Task Group</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {tests.length === 0 &&\n                                <tr>\n                                    <td colSpan={3} style={{ textAlign: \"center\" }}>No Tests Running.</td>\n                                </tr>\n                            }\n\n                            {tests.map(test => {\n                                return (\n                                    <tr key={test.timestamp}>\n                                        <td>{test.timestamp}</td>\n                                        <td>{test.status}</td>\n                                        <td>{test.group}</td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </>\n            }\n        </>\n    )\n};\n\nexport default RunningTests;","import React, { useEffect, useState } from \"react\";\nimport RunningTests from \"../../../components/RunningTests/RunningTests\";\nimport ApiKeyModal from \"../../../components/ApiKeyModal/ApiKeyModal\";\n\nimport styles from \"./RunTestsView.module.scss\";\n\nexport interface RunTestsViewProps { apiKey: string, onLoad: Function, updateApiKey: Function };\n\nconst RunTestsView = (props: RunTestsViewProps) => {\n    const runTestUrl = \"https://cqxec6akld.execute-api.eu-west-1.amazonaws.com/prod/filerebuildperformancetest/starttest\";\n    const getRunningTestsUrl = \"https://cqxec6akld.execute-api.eu-west-1.amazonaws.com/prod/filerebuildperformancetest/getrunningtests\";\n\n    const [loading, setLoading] = useState(false);\n    const [apiKeyIsInvalid, setApiKeyIsInvalid] = useState(false);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n\n    const runNewTest = async () => {\n        await setLoading(true);\n\n        try {\n            const response = await fetch(runTestUrl, {\n                method: \"POST\",\n                headers: {\n                    \"x-api-key\": props.apiKey\n                },\n                body: \"{}\"\n            });\n\n            let responseString = await response.json();\n\n            if (response.ok) {\n                setApiKeyIsInvalid(false);\n            }\n            else {\n                if (responseString.message === \"Forbidden\") {\n                    console.error(`Error ${response.status}. Invalid API Key`)\n                }\n                else {\n                    console.error(`Error ${response.status}. ${responseString}`);\n                }\n\n                setApiKeyIsInvalid(true);\n            }\n        }\n        catch (e) {\n            console.error(e);\n            setApiKeyIsInvalid(true);\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        props.onLoad(\"FileRebuildPerformanceTest | Tests\", \"/filerebuilderformancetest/runtest\");\n    }, [props]);\n\n    const submitNewApiKey = async (newApiKey: string) => {\n        setModalIsOpen(false);\n        props.updateApiKey(newApiKey);\n    };\n\n    return (\n        <div className={styles.runTestsPageContainer}>\n            <ApiKeyModal\n                isOpen={modalIsOpen}\n                onCloseAction={() => setModalIsOpen(false)}\n                submitFunction={submitNewApiKey} />\n\n            {loading &&\n                <div>Loading ... </div>\n            }\n\n            {!loading &&\n                <>\n                    {apiKeyIsInvalid &&\n                        <div>\n                            Your API Key is invalid.\n                            Click <button\n                                className={styles.buttonLink}\n                                type=\"button\"\n                                onClick={() => setModalIsOpen(true)}>here</button> to enter a new one.\n                        </div>\n                    }\n\n                    <h2>\n                        Start New Test <span className={styles.newTestContainer}>\n                            <svg className={styles.newTest} onClick={() => runNewTest()}></svg>\n                        </span>\n                    </h2>\n\n                    <div className={styles.runningTests}>\n                        <RunningTests apiKey={props.apiKey} url={getRunningTestsUrl}/>\n                    </div>\n                </>\n            }\n        </div>\n    );\n};\n\nexport default RunTestsView;","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport formatDuration from \"../../../../components/formatDuration/formatDuration\";\n\nimport styles from \"./ResultsGraph.module.scss\";\n\nexport interface ResultsGraphProps { results: Array<any> };\n\nconst formatTimestamp = (datetimeString: string) =>\n    new Date(datetimeString).toLocaleString().replace(\",\", \" -\");\n\nconst formatFileSize = (fileSize: number) => `${Math.floor(fileSize / 1000000)} MB`;\n\nconst ResultsGraph = (props: ResultsGraphProps) => {\n    // TODO: set the values to true, and update the checkbox default values\n    const [showDetect, setshowDetect] = useState(false);\n    const [showRebuild, setshowRebuild] = useState(true);\n    const [showUpload, setshowUpload] = useState(false);\n    const [showDownload, setshowDownload] = useState(false);\n    const [showResponseTime, setshowResponseTime] = useState(false);\n\n    const filteredResults = props.results[0].results.filter((r: any) => parseInt(r.responseCode) === 200);\n\n    const labels = filteredResults.map((r: any) => {\n        let fs = formatFileSize(r.metricFilesize);\n        let label = r.name.replace(\"Post_FileForProcessing_\", \"\");\n        return `${label} (${fs})`\n    });\n\n    const detectData = filteredResults.map((r: any) => formatDuration(r.metricDetect));\n    const rebuildData = filteredResults.map((r: any) => formatDuration(r.metricRebuild));\n    const uploadData = filteredResults.map((r: any) => formatDuration(r.metricUpload));\n    const downloadData = filteredResults.map((r: any) => formatDuration(r.metricDownload));\n    const responseTimeData = filteredResults.map((r: any) => r.responseTime / 1000);\n\n    const data = {\n        datasets: [\n            {\n                type: \"bar\",\n                label: \"Detect\",\n                data: detectData,\n                fill: false,\n                borderColor: \"#EC932F\",\n                backgroundColor: \"#EC932F\",\n                pointBackgroundColor: \"#EC932F\",\n                pointHoverBackgroundColor: \"#EC932F\",\n                yAxisID: \"y-axis-2\",\n                hidden: !showDetect\n            },\n            {\n                type: \"bar\",\n                label: \"Rebuild\",\n                data: rebuildData,\n                fill: false,\n                backgroundColor: \"#0c3450\",\n                hoverBackgroundColor: \"#196480\",\n                yAxisID: \"y-axis-1\",\n                hidden: !showRebuild\n            },\n            {\n                type: \"bar\",\n                label: \"Upload\",\n                data: uploadData,\n                fill: false,\n                backgroundColor: \"#1fb3009e\",\n                hidden: !showUpload\n            },\n            {\n                type: \"bar\",\n                label: \"Download\",\n                data: downloadData,\n                fill: false,\n                backgroundColor: \"#e6e9ea\",\n                hidden: !showDownload\n            },\n            {\n                type: \"bar\",\n                label: \"Response Time\",\n                data: responseTimeData,\n                fill: false,\n                backgroundColor: \"#00a7ff\",\n                hidden: !showResponseTime\n            }\n        ]\n    };\n\n    const yAxesConfig = {\n        display: false,\n        gridLines: {\n            display: false\n        },\n        ticks: {\n            max: 2,\n            min: 0\n        }\n    };\n\n    const options = {\n        responsive: true,\n        tooltips: {\n            mode: \"label\"\n        },\n        elements: {\n            line: {\n                fill: false\n            }\n        },\n        scales: {\n            xAxes: [\n                {\n                    display: true,\n                    gridLines: {\n                        display: false\n                    },\n                    labels: labels,\n                }\n            ],\n            yAxes: [\n                {\n                    type: \"linear\",\n                    display: true,\n                    position: \"left\",\n                    id: \"y-axis-1\",\n                    gridLines: {\n                        display: false\n                    },\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Duration (seconds)\"\n                    }\n                },\n                { ...yAxesConfig }\n            ]\n        }\n    };\n\n    return (\n        <div>\n            <p>These results are from the most recent successful test run: <strong>{formatTimestamp(props.results[0].timestamp)}</strong></p>\n\n            <div className={styles.toggleDataContainer}>\n                <div className={styles.row}>\n                    <div className={styles.column}>\n                        <label>Detect <input type=\"checkbox\"\n                            onChange={() => setshowDetect(!showDetect)}\n                            defaultChecked={showDetect} /></label>\n                    </div>\n                    <div className={styles.column}>\n                        <label>Rebuild <input type=\"checkbox\"\n                            onChange={() => setshowRebuild(!showRebuild)}\n                            defaultChecked={showRebuild} /></label>\n                    </div>\n                    <div className={styles.column}>\n                        <label>Upload <input type=\"checkbox\"\n                            onChange={() => setshowUpload(!showUpload)}\n                            defaultChecked={showUpload} /></label>\n                    </div>\n                    <div className={styles.column}>\n                        <label>Download <input type=\"checkbox\"\n                            onChange={() => setshowDownload(!showDownload)}\n                            defaultChecked={showDownload} /></label>\n                    </div>\n                    <div className={styles.column}>\n                        <label>Response Time <input type=\"checkbox\"\n                            onChange={() => setshowResponseTime(!showResponseTime)}\n                            defaultChecked={showResponseTime} /></label>\n                    </div>\n                </div>\n            </div>\n\n            <Bar\n                data={data}\n                options={options} />\n        </div>\n    );\n};\n\nexport default ResultsGraph;","import React, { useState, useCallback } from \"react\";\nimport ResultsGraph from \"./ResultsGraph/ResultsGraph\";\nimport useMountEffect from \"../../../components/useMountEffect\";\nimport ApiKeyModal from \"../../../components/ApiKeyModal/ApiKeyModal\";\n\nimport styles from \"./ResultsGraphView.module.scss\";\n\nexport interface ResultsGraphViewProps {\n    apiKey: string,\n    onLoad: Function,\n    updateApiKey: Function\n};\n\nconst ResultsGraphView = (props: ResultsGraphViewProps) => {\n    const getResultsUrl = \"https://cqxec6akld.execute-api.eu-west-1.amazonaws.com/prod/filerebuildperformancetest/getresults\";\n\n    const [loading, setLoading] = useState(true);\n    const [results, setResults] = useState([]);\n    const [apiKeyIsInvalid, setApiKeyIsInvalid] = useState(false);\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n\n    const getResults = useCallback(async (apiKey?: string) => {\n        try {\n            const response = await fetch(getResultsUrl, {\n                method: \"GET\",\n                headers: {\n                    \"x-api-key\": apiKey ?? props.apiKey\n                }\n            });\n\n            let responseString = await response.json();\n\n            if (response.ok) {\n                setResults(JSON.parse(responseString));\n                setApiKeyIsInvalid(false);\n            }\n            else {\n                if (responseString.message === \"Forbidden\") {\n                    console.error(`Error ${response.status}. Invalid API Key`)\n                }\n                else {\n                    console.error(`Error ${response.status}. ${responseString}`);\n                }\n\n                setApiKeyIsInvalid(true);\n            }\n        }\n        catch (e) {\n            console.error(e);\n            setApiKeyIsInvalid(true);\n        }\n        finally {\n            setLoading(false);\n        }\n    }, [setResults, props.apiKey, setApiKeyIsInvalid, setLoading]);\n\n    useMountEffect(() => {\n        props.onLoad(\"FileRebuildPerformanceTest | Results Graph\", \"/filerebuilderformancetest/results/graph\");\n        getResults();\n    });\n\n    const submitNewApiKey = async (newApiKey: string) => {\n        setModalIsOpen(false);\n        props.updateApiKey(newApiKey);\n        await setLoading(true);\n        getResults(newApiKey);\n    };\n\n    return (\n        <div className={styles.resultsPageContainer}>\n            <ApiKeyModal\n                isOpen={modalIsOpen}\n                onCloseAction={() => setModalIsOpen(false)}\n                submitFunction={submitNewApiKey} />\n\n            {loading &&\n                <div>Loading ... </div>\n            }\n\n            {!loading &&\n                <>\n                    {apiKeyIsInvalid &&\n                        <div>\n                            Your API Key is invalid.\n                            Click <button\n                                className={styles.buttonLink}\n                                type=\"button\"\n                                onClick={() => setModalIsOpen(true)}>here</button> to enter a new one.\n                        </div>\n                    }\n\n                    {!apiKeyIsInvalid &&\n                        <ResultsGraph results={results} />\n                    }\n                </>\n            }\n        </div>\n    );\n};\n\nexport default ResultsGraphView;","import React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport {\n    NavBar,\n    Nav,\n    NavButton,\n    ExpandButton,\n    NavSpacer,\n    NavLabel\n} from \"./components/GlasswallNav/GlasswallNav\";\nimport Main from \"./components/Main/Main\";\nimport SplashScreenView from \"./views/SplashScreenView/SplashScreenView\";\nimport ArchitectureView from \"./views/ArchitectureView/ArchitectureView\";\nimport ResultsTableView from \"./views/FileRebuildPerformanceTest/ResultsTableView/ResultsTableView\";\nimport RunTestsView from \"./views/FileRebuildPerformanceTest/RunTestsView/RunTestsView\";\nimport ResultsGraphView from \"./views/FileRebuildPerformanceTest/ResultsGraphView/ResultsGraphView\";\n\nimport styles from \"./App.module.scss\";\n\nimport \"./animate.css\";\n\nconst App = () => {\n    const [apiKey, setApiKey] = useState(\"\");\n    const [apiKeyConfirmed, setApiKeyConfirmed] = useState(false);\n    const [mainTitle, setMainTitle] = useState(\"\");\n    const [navExpanded, setNavExpanded] = useState(true);\n    const [selectedNavButton, setSelectedNavButton] = useState(\"\");\n\n    const submitApiKey = async e => {\n        e.preventDefault();\n        setApiKeyConfirmed(true);\n    };\n\n    const onLoad = (title, selectedButton) => {\n        setMainTitle(title);\n        setSelectedNavButton(selectedButton);\n    };\n\n    useEffect(() => {\n        if (!apiKeyConfirmed) {\n            setApiKey(\"\");\n        }\n    }, [apiKeyConfirmed, setApiKey]);\n\n    return (\n        <div className={styles.app}>\n            <div className={styles.mainContainer}>\n                {!apiKeyConfirmed &&\n                    <SplashScreenView changeHandler={setApiKey} submitApiKey={submitApiKey} />\n                }\n\n                {apiKeyConfirmed &&\n                    <Router>\n                        <NavBar expanded={navExpanded} logo>\n                            <Nav expanded={navExpanded}>\n                                <Link to=\"/\">\n                                    <NavButton selected={selectedNavButton === \"Architecture\"}>\n                                        Architecture\n                                    </NavButton>\n                                </Link>\n\n                                <NavSpacer />\n\n                                <NavLabel label=\"FileRebuildPerformanceTest\" />\n                                <Link to=\"/filerebuilderformancetest/runtest\">\n                                    <NavButton selected={selectedNavButton === \"/filerebuilderformancetest/runtest\"}>\n                                        Run\n                                    </NavButton>\n                                </Link>\n                                <Link to=\"/filerebuilderformancetest/results/table\">\n                                    <NavButton selected={selectedNavButton === \"/filerebuilderformancetest/results/table\"}>\n                                        Results Table\n                                    </NavButton>\n                                </Link>\n                                <Link to=\"/filerebuilderformancetest/results/graph\">\n                                    <NavButton selected={selectedNavButton === \"/filerebuilderformancetest/results/graph\"}>\n                                        Results Graph\n                                    </NavButton>\n                                </Link>\n                            </Nav>\n\n                            <Nav expanded={navExpanded} bottom>\n                                <Link to=\"/\">\n                                    <NavButton clickHandler={() => setApiKeyConfirmed(false)}>\n                                        Logout\n                                    </NavButton>\n                                </Link>\n                            </Nav>\n\n                            <ExpandButton\n                                expanded={navExpanded}\n                                clickHandler={() => setNavExpanded(!navExpanded)} />\n                        </NavBar>\n\n                        <Main expanded={navExpanded} showTitle title={mainTitle}>\n                            <Switch>\n                                <Route exact path=\"/\">\n                                    <ArchitectureView onLoad={onLoad} />\n                                </Route>\n\n                                <Route path=\"/filerebuilderformancetest/runtest\">\n                                    <RunTestsView\n                                        onLoad={onLoad}\n                                        apiKey={apiKey}\n                                        updateApiKey={setApiKey} />\n                                </Route>\n\n                                <Route path=\"/filerebuilderformancetest/results/table\">\n                                    <ResultsTableView\n                                        onLoad={onLoad}\n                                        apiKey={apiKey}\n                                        updateApiKey={setApiKey} />\n                                </Route>\n\n                                <Route path=\"/filerebuilderformancetest/results/graph\">\n                                    <ResultsGraphView\n                                        onLoad={onLoad}\n                                        apiKey={apiKey}\n                                        updateApiKey={setApiKey} />\n                                </Route>\n                            </Switch>\n                        </Main>\n                    </Router>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.scss\";\nimport \"./normalize.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ApiKeyModal_header__guNXp\",\"body\":\"ApiKeyModal_body__3grJm\",\"close\":\"ApiKeyModal_close__3jWU-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"runTestsPageContainer\":\"RunTestsView_runTestsPageContainer__2r9ZF\",\"newTestContainer\":\"RunTestsView_newTestContainer__2e2zZ\",\"newTest\":\"RunTestsView_newTest__3wkEM\",\"runningTests\":\"RunTestsView_runningTests__12taF\",\"buttonLink\":\"RunTestsView_buttonLink__tSO_d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scrollContainer\":\"Nav_scrollContainer__2er9V\",\"navBar\":\"Nav_navBar__2TP14\",\"nav\":\"Nav_nav__2YH2E\",\"menuExpanded\":\"Nav_menuExpanded__11k3t\",\"bottom\":\"Nav_bottom__1tQJK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultRow\":\"ResultsTable_resultRow__2IJnJ\",\"timestamp\":\"ResultsTable_timestamp__2e-ek\",\"filenameCell\":\"ResultsTable_filenameCell__2dX6r\",\"failedTestRow\":\"ResultsTable_failedTestRow__2SGyB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"RunningTests_table__A4zQZ\",\"header\":\"RunningTests_header__31W-E\",\"headerText\":\"RunningTests_headerText__2YPwo\",\"headerCell\":\"RunningTests_headerCell__2pdq7\",\"headerCell1\":\"RunningTests_headerCell1__ggJqW\",\"row\":\"RunningTests_row__2lzxf\",\"titleCell\":\"RunningTests_titleCell__3C1bP\",\"cell\":\"RunningTests_cell__zw85N\",\"refreshRow\":\"RunningTests_refreshRow__2izEp\",\"refreshContainer\":\"RunningTests_refreshContainer__3uo6L\",\"refresh\":\"RunningTests_refresh__14oPO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__1yc5g\",\"expanded\":\"NavBar_expanded__3ri0A\",\"loading\":\"NavBar_loading__2lKsx\",\"logo\":\"NavBar_logo__1tBWK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"NavButton_button__2iIw2\",\"selected\":\"NavButton_selected__2nXkc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ExpandButton_button__1IiX7\",\"expanded\":\"ExpandButton_expanded__5-TMH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SplashScreenView_button__376p9\",\"link\":\"SplashScreenView_link__32B-5\",\"input\":\"SplashScreenView_input__3_6qj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Modal_overlay__1TgzI\",\"container\":\"Modal_container__3Wm3u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsPageContainer\":\"ResultsTableView_resultsPageContainer__2Xnuw\",\"buttonLink\":\"ResultsTableView_buttonLink__1jXrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsPageContainer\":\"ResultsGraphView_resultsPageContainer__m07Pk\",\"buttonLink\":\"ResultsGraphView_buttonLink__1sh4w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\",\"mainContainer\":\"App_mainContainer__3GtbL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultLogo\":\"GlasswallLogo_defaultLogo__ZK8A_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spacer\":\"NavSpacer_spacer__8nqqV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"NavLabel_label__3v6hJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"architecturePageContainer\":\"ArchitectureView_architecturePageContainer__31AOP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"GlasswallTable_table__3xj1I\",\"header\":\"GlasswallTable_header__1Jmue\",\"headerText\":\"GlasswallTable_headerText__2atWa\"};"],"sourceRoot":""}